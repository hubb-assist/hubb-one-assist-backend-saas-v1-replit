Promotion failed
Your deployment attempt had the following errors:
The deployment is failing health checks due to the root endpoint (/) not responding correctly
The FastAPI app doesn't have a proper route handler for the root path
The root path in the README describes a feature that isn't present in the actual code
Assistant suggestions
# Página inicial HTML
@app.get("/", response_class=HTMLResponse)
async def home():
    """
    Página inicial com informações sobre a API e regras do projeto.
    """
    # Ler arquivo rules.md
    rules_file = Path.cwd().parent / 'rules.md'
    
    # Inicializar o conteúdo das regras
    rules_html = ""
    
    # Verificar se o arquivo existe
    try:
        with open(rules_file, 'r', encoding='utf-8') as f:
            rules_content = f.read()
            # Converter markdown para HTML
            rules_html = markdown.markdown(
                rules_content,
                extensions=[]
            )
    except Exception as e:
        rules_html = f"<div class='warning'><p>Não foi possível carregar as regras do projeto: {str(e)}</p></div>"
# Página inicial HTML
@app.get("/", response_class=HTMLResponse)
async def home():
    """
    Página inicial com informações sobre a API.
    """
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>FastAPI REST API</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; max-width: 900px; margin: 0 auto; color: #333; }
            h1 { color: #333; border-bottom: 2px solid #eee; padding-bottom: 10px; }
            h2 { color: #444; margin-top: 30px; border-bottom: 1px solid #eee; padding-bottom: 5px; }
            p { margin-bottom: 15px; }
            .endpoints { background: #f8f8f8; padding: 15px; border-radius: 5px; }
            a { color: #0066cc; text-decoration: none; }
            a:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <h1>FastAPI REST API</h1>
        <p>Welcome to the FastAPI REST API. This API provides CRUD operations for a simple Item model.</p>
        
        <h2>API Documentation</h2>
        <p>Interactive API documentation is available at:</p>
        <ul>
            <li><a href="/docs">Swagger UI</a></li>
            <li><a href="/redoc">ReDoc</a></li>
        </ul>
        
        <h2>Available Endpoints</h2>
        <div class="endpoints">
            <p><strong>GET /api-info</strong> - Basic API information</p>
            <p><strong>GET /items</strong> - List all items with pagination and filter options</p>
            <p><strong>GET /items/{item_id}</strong> - Get a specific item by ID</p>
            <p><strong>POST /items</strong> - Create a new item</p>
            <p><strong>PUT /items/{item_id}</strong> - Update an existing item</p>
            <p><strong>DELETE /items/{item_id}</strong> - Remove an item</p>
        </div>
    </body>
    </html>
    """
    return html_content
# API info endpoint
@app.get("/api-info")
async def api_info():
    """
    Returns basic information about the API.
    """
    return {
        "name": "FastAPI REST API",
        "version": "1.0.0",
        "description": "Simple REST API with CRUD operations",
        "documentation": "/docs",
        "endpoints": [
            "/",
            "/api-info",
            "/items",
            "/items/{item_id}"
        ]
    }
# In-memory items store
items_db = {}
item_id_counter = 0

# Items endpoints
@app.get("/items")
async def list_items(
    skip: int = Query(0, ge=0, description="Number of items to skip"),
    limit: int = Query(10, ge=1, le=100, description="Max number of items to return")
):
    """
    List items with pagination
    """
    items_list = list(items_db.values())
    return {
        "total": len(items_list),
        "items": items_list[skip:skip+limit],
        "skip": skip,
        "limit": limit
    }

@app.get("/items/{item_id}")
async def get_item(item_id: int):
    """
    Get a specific item by ID
    """
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    return items_db[item_id]
