Passo 1: Migration Alembic

Crie o arquivo em alembic/versions/20250520170000_create_payables_and_receivables.py (substitua 20250520170000 e <down_revision> pelos valores do seu ambiente):

python
Copiar
Editar
"""create payables and receivables tables

Revision ID: 20250520170000
Revises: <down_revision>
Create Date: 2025-05-20 17:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
import uuid

# revisão deste arquivo
revision = "20250520170000"
down_revision = "<down_revision>"
branch_labels = None
depends_on = None

def upgrade():
    # Tabela payables
    op.create_table(
        "payables",
        sa.Column("id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),
        sa.Column("subscriber_id", sa.dialects.postgresql.UUID(as_uuid=True), sa.ForeignKey("subscribers.id"), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.Column("amount", sa.Numeric(12, 2), nullable=False),
        sa.Column("due_date", sa.Date(), nullable=False),
        sa.Column("paid", sa.Boolean(), nullable=False, server_default=sa.false()),
        sa.Column("payment_date", sa.DateTime(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.true()),
        sa.Column("created_at", sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column("updated_at", sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
    )
    # Tabela receivables
    op.create_table(
        "receivables",
        sa.Column("id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),
        sa.Column("subscriber_id", sa.dialects.postgresql.UUID(as_uuid=True), sa.ForeignKey("subscribers.id"), nullable=False),
        sa.Column("patient_id", sa.dialects.postgresql.UUID(as_uuid=True), sa.ForeignKey("patients.id"), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.Column("amount", sa.Numeric(12, 2), nullable=False),
        sa.Column("due_date", sa.Date(), nullable=False),
        sa.Column("received", sa.Boolean(), nullable=False, server_default=sa.false()),
        sa.Column("receive_date", sa.DateTime(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.true()),
        sa.Column("created_at", sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column("updated_at", sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
    )
    # Índices
    op.create_index("ix_payables_due_date", "payables", ["due_date"])
    op.create_index("ix_receivables_due_date", "receivables", ["due_date"])

def downgrade():
    op.drop_index("ix_receivables_due_date", table_name="receivables")
    op.drop_index("ix_payables_due_date", table_name="payables")
    op.drop_table("receivables")
    op.drop_table("payables")
Depois de criar salve o arquivo e execute:

bash
Copiar
Editar
alembic upgrade head
Modelos SQLAlchemy

app/db/models_payable.py

python
Copiar
Editar
from uuid import uuid4
from datetime import datetime
from sqlalchemy import Column, String, Numeric, Date, Boolean, DateTime, Text, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from app.db.session import Base

class Payable(Base):
    __tablename__ = "payables"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    subscriber_id = Column(UUID(as_uuid=True), ForeignKey("subscribers.id"), nullable=False)
    description   = Column(String(255), nullable=False)
    amount        = Column(Numeric(12, 2), nullable=False)
    due_date      = Column(Date, nullable=False)
    paid          = Column(Boolean, default=False, nullable=False)
    payment_date  = Column(DateTime, nullable=True)
    notes         = Column(Text, nullable=True)
    is_active     = Column(Boolean, default=True, nullable=False)
    created_at    = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at    = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
app/db/models_receivable.py

python
Copiar
Editar
from uuid import uuid4
from datetime import datetime
from sqlalchemy import Column, String, Numeric, Date, Boolean, DateTime, Text, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from app.db.session import Base

class Receivable(Base):
    __tablename__ = "receivables"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    subscriber_id = Column(UUID(as_uuid=True), ForeignKey("subscribers.id"), nullable=False)
    patient_id    = Column(UUID(as_uuid=True), ForeignKey("patients.id"), nullable=False)
    description   = Column(String(255), nullable=False)
    amount        = Column(Numeric(12, 2), nullable=False)
    due_date      = Column(Date, nullable=False)
    received      = Column(Boolean, default=False, nullable=False)
    receive_date  = Column(DateTime, nullable=True)
    notes         = Column(Text, nullable=True)
    is_active     = Column(Boolean, default=True, nullable=False)
    created_at    = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at    = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
Próximos passos (após confirmação de que as tabelas existem):

Avançar para Schemas Pydantic em app/schemas/finance_schema.py

Depois implementar a Interface de Repositório e os Use Cases

Feito isso, teste no Swagger UI e valide exposições de /finance/payables e /finance/receivables.