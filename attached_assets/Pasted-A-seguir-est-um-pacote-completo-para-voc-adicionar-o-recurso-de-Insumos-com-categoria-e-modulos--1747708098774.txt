A seguir está um pacote completo para você adicionar o recurso de Insumos (com categoria e modulos) no backend FastAPI + SQLAlchemy, seguindo o mesmo padrão DDD/SOLID que você já tem para pacientes.

1. Modelo SQLAlchemy
📁 app/db/models/insumo.py

python
Copiar
Editar
from uuid import uuid4
from sqlalchemy import Column, String, Numeric, Boolean, ForeignKey, Table
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from app.db.session import Base

# tabela associativa para modulos
insumo_modulo = Table(
    "insumo_modulo",
    Base.metadata,
    Column("insumo_id", UUID(as_uuid=True), ForeignKey("insumos.id"), primary_key=True),
    Column("modulo", String, primary_key=True),
)

class Insumo(Base):
    __tablename__ = "insumos"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    subscriber_id = Column(UUID(as_uuid=True), ForeignKey("subscribers.id"), nullable=False)
    nome = Column(String, nullable=False)
    tipo = Column(String, nullable=False)
    unidade = Column(String, nullable=False)
    valor = Column(Numeric(12, 2), nullable=False)
    observacoes = Column(String, nullable=True)
    categoria = Column(String, nullable=False)
    is_active = Column(Boolean, default=True, nullable=False)

    # relacionamento many-to-many simples via string de módulo
    modulos = relationship("Modulo", secondary=insumo_modulo, back_populates="insumos")

# Entidade auxiliar para módulos (caso queira tabela própria)
class Modulo(Base):
    __tablename__ = "modulos"

    name = Column(String, primary_key=True)
    insumos = relationship("Insumo", secondary=insumo_modulo, back_populates="modulos")
Obs: se preferir não criar tabela modulos, use simplesmente uma coluna modulos: ARRAY(String).

2. Schemas Pydantic
📁 app/schemas/insumo_schema.py

python
Copiar
Editar
from uuid import UUID
from typing import List, Optional
from pydantic import BaseModel, condecimal, constr, validator
from datetime import datetime

class InsumoBase(BaseModel):
    nome: str
    tipo: str
    unidade: str
    valor: condecimal(gt=0, decimal_places=2)
    observacoes: Optional[str]
    categoria: constr(strip_whitespace=True, min_length=1)
    modulos: List[constr(strip_whitespace=True, min_length=1)]

class InsumoCreate(InsumoBase):
    pass

class InsumoUpdate(BaseModel):
    nome: Optional[str]
    tipo: Optional[str]
    unidade: Optional[str]
    valor: Optional[condecimal(gt=0, decimal_places=2)]
    observacoes: Optional[str]
    categoria: Optional[constr(strip_whitespace=True, min_length=1)]
    modulos: Optional[List[constr(strip_whitespace=True, min_length=1)]]

class InsumoResponse(InsumoBase):
    id: UUID
    subscriber_id: UUID
    is_active: bool
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True
3. Interface de Repositório
📁 app/domain/insumo/interfaces.py

python
Copiar
Editar
from abc import ABC, abstractmethod
from uuid import UUID
from typing import List, Optional
from app.domain.insumo.entities import InsumoEntity
from app.schemas.insumo_schema import InsumoCreate, InsumoUpdate

class IInsumoRepository(ABC):
    @abstractmethod
    def create(self, data: InsumoCreate, subscriber_id: UUID) -> InsumoEntity: ...
    @abstractmethod
    def get_by_id(self, id: UUID, subscriber_id: UUID) -> Optional[InsumoEntity]: ...
    @abstractmethod
    def update(self, id: UUID, data: InsumoUpdate, subscriber_id: UUID) -> InsumoEntity: ...
    @abstractmethod
    def delete(self, id: UUID, subscriber_id: UUID) -> None: ...
    @abstractmethod
    def list_all(
        self,
        subscriber_id: UUID,
        skip: int = 0,
        limit: int = 100,
        categoria: Optional[str] = None,
        modulos: Optional[List[str]] = None
    ) -> List[InsumoEntity]: ...
4. Entidade de Domínio
📁 app/domain/insumo/entities.py

python
Copiar
Editar
from uuid import UUID
from datetime import datetime
from typing import List, Optional

class InsumoEntity:
    def __init__(
        self,
        id: UUID,
        subscriber_id: UUID,
        nome: str,
        tipo: str,
        unidade: str,
        valor: float,
        observacoes: Optional[str],
        categoria: str,
        modulos: List[str],
        is_active: bool,
        created_at: datetime,
        updated_at: datetime
    ):
        self.id = id
        self.subscriber_id = subscriber_id
        self.nome = nome
        self.tipo = tipo
        self.unidade = unidade
        self.valor = valor
        self.observacoes = observacoes
        self.categoria = categoria
        self.modulos = modulos
        self.is_active = is_active
        self.created_at = created_at
        self.updated_at = updated_at
5. Implementação do Repositório com SQLAlchemy
📁 app/infrastructure/repositories/insumo_sqlalchemy.py

python
Copiar
Editar
from typing import List, Optional
from uuid import UUID
from sqlalchemy.orm import Session
from app.db.models.insumo import Insumo, Modulo, insumo_modulo
from app.domain.insumo.interfaces import IInsumoRepository
from app.domain.insumo.entities import InsumoEntity
from app.schemas.insumo_schema import InsumoCreate, InsumoUpdate

class InsumoSQLAlchemyRepository(IInsumoRepository):
    def __init__(self, db: Session):
        self.db = db

    def create(self, data: InsumoCreate, subscriber_id: UUID) -> InsumoEntity:
        # criar módulos se necessário
        mod_objs = [self._get_or_create_modulo(name) for name in data.modulos]
        insumo = Insumo(
            subscriber_id=subscriber_id,
            **data.dict(exclude={"modulos"})
        )
        insumo.modulos = mod_objs
        self.db.add(insumo)
        self.db.commit()
        self.db.refresh(insumo)
        return self._to_entity(insumo)

    def get_by_id(self, id: UUID, subscriber_id: UUID) -> Optional[InsumoEntity]:
        insumo = (
            self.db.query(Insumo)
            .filter_by(id=id, subscriber_id=subscriber_id, is_active=True)
            .first()
        )
        return self._to_entity(insumo) if insumo else None

    def update(self, id: UUID, data: InsumoUpdate, subscriber_id: UUID) -> InsumoEntity:
        insumo = self.db.query(Insumo).filter_by(id=id, subscriber_id=subscriber_id).first()
        if not insumo:
            return None
        for k, v in data.dict(exclude_unset=True, exclude={"modulos"}).items():
            setattr(insumo, k, v)
        if data.modulos is not None:
            insumo.modulos = [self._get_or_create_modulo(name) for name in data.modulos]
        self.db.commit()
        self.db.refresh(insumo)
        return self._to_entity(insumo)

    def delete(self, id: UUID, subscriber_id: UUID) -> None:
        insumo = self.db.query(Insumo).filter_by(id=id, subscriber_id=subscriber_id).first()
        if insumo:
            insumo.is_active = False
            self.db.commit()

    def list_all(
        self,
        subscriber_id: UUID,
        skip: int = 0,
        limit: int = 100,
        categoria: Optional[str] = None,
        modulos: Optional[List[str]] = None
    ) -> List[InsumoEntity]:
        query = self.db.query(Insumo).filter_by(subscriber_id=subscriber_id, is_active=True)
        if categoria:
            query = query.filter(Insumo.categoria == categoria)
        if modulos:
            query = query.join(insumo_modulo).filter(insumo_modulo.c.modulo.in_(modulos))
        results = query.offset(skip).limit(limit).all()
        return [self._to_entity(i) for i in results]

    def _get_or_create_modulo(self, name: str) -> Modulo:
        m = self.db.query(Modulo).filter_by(name=name).first()
        if not m:
            m = Modulo(name=name)
            self.db.add(m)
            self.db.commit()
        return m

    def _to_entity(self, db_insumo: Insumo) -> InsumoEntity:
        return InsumoEntity(
            id=db_insumo.id,
            subscriber_id=db_insumo.subscriber_id,
            nome=db_insumo.nome,
            tipo=db_insumo.tipo,
            unidade=db_insumo.unidade,
            valor=float(db_insumo.valor),
            observacoes=db_insumo.observacoes,
            categoria=db_insumo.categoria,
            modulos=[m.name for m in db_insumo.modulos],
            is_active=db_insumo.is_active,
            created_at=db_insumo.created_at,
            updated_at=db_insumo.updated_at,
        )
6. Use Cases
📁 app/application/use_cases/insumo_use_cases.py

python
Copiar
Editar
from uuid import UUID
from typing import List, Optional
from app.domain.insumo.interfaces import IInsumoRepository
from app.domain.insumo.entities import InsumoEntity
from app.schemas.insumo_schema import InsumoCreate, InsumoUpdate

class CreateInsumoUseCase:
    def __init__(self, repo: IInsumoRepository):
        self.repo = repo

    def execute(self, data: InsumoCreate, subscriber_id: UUID) -> InsumoEntity:
        return self.repo.create(data, subscriber_id)

class GetInsumoUseCase:
    def __init__(self, repo: IInsumoRepository):
        self.repo = repo

    def execute(self, id: UUID, subscriber_id: UUID) -> InsumoEntity:
        insumo = self.repo.get_by_id(id, subscriber_id)
        if not insumo:
            raise ValueError("Insumo não encontrado")
        return insumo

class UpdateInsumoUseCase:
    def __init__(self, repo: IInsumoRepository):
        self.repo = repo

    def execute(self, id: UUID, data: InsumoUpdate, subscriber_id: UUID) -> InsumoEntity:
        updated = self.repo.update(id, data, subscriber_id)
        if not updated:
            raise ValueError("Insumo não encontrado para atualização")
        return updated

class DeleteInsumoUseCase:
    def __init__(self, repo: IInsumoRepository):
        self.repo = repo

    def execute(self, id: UUID, subscriber_id: UUID) -> None:
        self.repo.delete(id, subscriber_id)

class ListInsumosUseCase:
    def __init__(self, repo: IInsumoRepository):
        self.repo = repo

    def execute(
        self,
        subscriber_id: UUID,
        skip: int = 0,
        limit: int = 100,
        categoria: Optional[str] = None,
        modulos: Optional[List[str]] = None
    ) -> List[InsumoEntity]:
        return self.repo.list_all(subscriber_id, skip, limit, categoria, modulos)
7. FastAPI Router
📁 app/api/routes/insumo_router.py

python
Copiar
Editar
from typing import List, Optional
from uuid import UUID
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.schemas.insumo_schema import InsumoCreate, InsumoResponse, InsumoUpdate
from app.db.session import get_db
from app.infrastructure.repositories.insumo_sqlalchemy import InsumoSQLAlchemyRepository
from app.application.use_cases.insumo_use_cases import (
    CreateInsumoUseCase, GetInsumoUseCase,
    UpdateInsumoUseCase, DeleteInsumoUseCase, ListInsumosUseCase
)
from app.core.dependencies import get_current_user

router = APIRouter(prefix="/insumos", tags=["insumos"])

def get_insumo_repo(db: Session = Depends(get_db)):
    return InsumoSQLAlchemyRepository(db)

@router.get("/", response_model=List[InsumoResponse])
def list_insumos(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1),
    categoria: Optional[str] = None,
    modulos: Optional[List[str]] = Query(None),
    current_user=Depends(get_current_user),
    repo=Depends(get_insumo_repo),
):
    uc = ListInsumosUseCase(repo)
    return uc.execute(
        subscriber_id=current_user.subscriber_id,
        skip=skip,
        limit=limit,
        categoria=categoria,
        modulos=modulos,
    )

@router.get("/{insumo_id}", response_model=InsumoResponse)
def get_insumo(
    insumo_id: UUID,
    current_user=Depends(get_current_user),
    repo=Depends(get_insumo_repo)
):
    uc = GetInsumoUseCase(repo)
    try:
        return uc.execute(insumo_id, subscriber_id=current_user.subscriber_id)
    except ValueError:
        raise HTTPException(status_code=404, detail="Insumo não encontrado")

@router.post("/", response_model=InsumoResponse, status_code=201)
def create_insumo(
    data: InsumoCreate,
    current_user=Depends(get_current_user),
    repo=Depends(get_insumo_repo)
):
    uc = CreateInsumoUseCase(repo)
    return uc.execute(data, subscriber_id=current_user.subscriber_id)

@router.put("/{insumo_id}", response_model=InsumoResponse)
def update_insumo(
    insumo_id: UUID,
    data: InsumoUpdate,
    current_user=Depends(get_current_user),
    repo=Depends(get_insumo_repo)
):
    uc = UpdateInsumoUseCase(repo)
    try:
        return uc.execute(insumo_id, data, subscriber_id=current_user.subscriber_id)
    except ValueError:
        raise HTTPException(status_code=404, detail="Insumo não encontrado para atualização")

@router.delete("/{insumo_id}", status_code=204)
def delete_insumo(
    insumo_id: UUID,
    current_user=Depends(get_current_user),
    repo=Depends(get_insumo_repo)
):
    uc = DeleteInsumoUseCase(repo)
    uc.execute(insumo_id, subscriber_id=current_user.subscriber_id)
Próximos passos
Migração: crie a tabela insumos, modulos e insumo_modulo com Alembic.

Registre insumo_router no seu main.py.

Teste cada endpoint com Swagger ou Postman.

Pronto! Depois que esses arquivos estiverem no lugar, você terá a API de Insumos completa, com CRUD, filtros por categoria e módulos relacionados.