Passo 1: Migration Alembic para “anamneses”
Crie o arquivo em
alembic/versions/20250520173000_create_anamneses_table.py (substitua timestamp e <down_revision>):

python
Copiar
Editar
"""create anamneses table

Revision ID: 20250520173000
Revises: <down_revision>
Create Date: 2025-05-20 17:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
import uuid

revision = "20250520173000"
down_revision = "<down_revision>"
branch_labels = None
depends_on = None

def upgrade():
    op.create_table(
        "anamneses",
        sa.Column("id", sa.dialects.postgresql.UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),
        sa.Column("subscriber_id", sa.dialects.postgresql.UUID(as_uuid=True), sa.ForeignKey("subscribers.id"), nullable=False),
        sa.Column("patient_id", sa.dialects.postgresql.UUID(as_uuid=True), sa.ForeignKey("patients.id"), nullable=False),
        sa.Column("chief_complaint", sa.Text(), nullable=False),
        sa.Column("medical_history", sa.Text(), nullable=True),
        sa.Column("allergies", sa.Text(), nullable=True),
        sa.Column("medications", sa.Text(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.true()),
        sa.Column("created_at", sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column("updated_at", sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
    )
    op.create_index("ix_anamneses_patient", "anamneses", ["patient_id"])

def downgrade():
    op.drop_index("ix_anamneses_patient", table_name="anamneses")
    op.drop_table("anamneses")
Depois de salvar, execute no terminal:

bash
Copiar
Editar
alembic upgrade head
Modelo SQLAlchemy para Anamnese
Crie o arquivo
app/db/models_anamnesis.py:

python
Copiar
Editar
from uuid import uuid4
from datetime import datetime
from sqlalchemy import Column, Text, Boolean, DateTime, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from app.db.session import Base

class Anamnesis(Base):
    __tablename__ = "anamneses"

    id              = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    subscriber_id   = Column(UUID(as_uuid=True), ForeignKey("subscribers.id"), nullable=False)
    patient_id      = Column(UUID(as_uuid=True), ForeignKey("patients.id"), nullable=False)
    chief_complaint = Column(Text, nullable=False)
    medical_history = Column(Text, nullable=True)
    allergies       = Column(Text, nullable=True)
    medications     = Column(Text, nullable=True)
    notes           = Column(Text, nullable=True)
    is_active       = Column(Boolean, default=True, nullable=False)
    created_at      = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at      = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
Após isso, confirme no banco que a tabela anamneses existe e então podemos seguir para os Schemas Pydantic!